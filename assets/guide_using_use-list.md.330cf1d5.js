import{_ as s,o as e,c as o,a}from"./app.3ac53504.js";const F=JSON.parse('{"title":"Working with lists","description":"","frontmatter":{},"headers":[{"level":2,"title":"Return values","slug":"return-values","link":"#return-values","children":[]},{"level":2,"title":"Autorefreshing with computed props","slug":"autorefreshing-with-computed-props","link":"#autorefreshing-with-computed-props","children":[]}],"relativePath":"guide/using/use-list.md"}'),n={name:"guide/using/use-list.md"},l=a(`<h1 id="working-with-lists" tabindex="-1">Working with lists <a class="header-anchor" href="#working-with-lists" aria-hidden="true">#</a></h1><p>To get a list of models from your api, use the <code>useList</code> function.</p><div class="language-vue"><button class="copy"></button><span class="lang">vue</span><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">lang</span><span style="color:#A6ACCD;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> vroom </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@/vroom</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> items </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> vroom</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">useList</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">book</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><ul><li><code>model</code>: The name of the model to fetch</li><li><code>options</code> (optional): An object of options (each of these are described in further detail in later sections) <ul><li><code>sort</code>: An array of sort fields</li><li><code>filter</code>: An object of filters</li><li><code>include</code>: An array of relations to include</li><li><code>pagination</code> (<code>object</code>): Pagination options</li><li><code>lazy</code> (<code>boolean</code>): If true useList will only fetch when refresh is called (default: <code>false</code>)</li><li><code>loadOnUpdate</code> (<code>boolean</code>): If true <code>isLoading</code> will be set to true on every fetch (including refreshes) (default: <code>false</code>)</li><li><code>mergePages</code> (<code>boolean</code>): If true any change of page/cursor in pagination will append the next page instead of swapping them (useful for infinite scrolling) (default <code>false</code>)</li><li><code>path</code> (<code>string</code>): If set will overwrite the path being called (instead of vrooms autogenerated one)</li></ul></li></ul><h2 id="return-values" tabindex="-1">Return values <a class="header-anchor" href="#return-values" aria-hidden="true">#</a></h2><p><code>useList</code> will return the following</p><ul><li><code>items</code>: A computed array of items returned from the api (will be an empty array while loading)</li><li><code>isLoading</code> (<code>boolean</code>): True while the fetching from api the first time (if <code>loadOnUpdate</code> is set to <code>true</code> it will also be true on refreshes)</li><li><code>isFailed</code> (<code>boolean</code>): True if the latest fetch failed</li><li><code>refresh</code> (<code>function</code>): Calling this function will refetch from the api</li><li><code>pushId</code> (<code>(id) =&gt; void</code>): If you have an item loading (e.g. something you just created) that you want to show in the list, you can use this function to add the id</li><li><code>create</code> (<code>(data) =&gt; void</code>): Shorthand for creating a new item and pushing the id to the list</li></ul><h2 id="autorefreshing-with-computed-props" tabindex="-1">Autorefreshing with computed props <a class="header-anchor" href="#autorefreshing-with-computed-props" aria-hidden="true">#</a></h2><p><code>useList</code> will automatically refresh your list if it sees your <code>filter</code>s, <code>sort</code> og <code>pagination</code> change. To do that you can pass it reactive props like <code>ref</code> or <code>computed</code> like so:</p><div class="language-vue"><button class="copy"></button><span class="lang">vue</span><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">lang</span><span style="color:#A6ACCD;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> vroom </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@/vroom</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> page </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// If page is changed, a refetch will trigger</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> items </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> vroom</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">useList</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">book</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">pagination</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> page </span><span style="color:#89DDFF;">}}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div>`,10),t=[l];function p(c,r,i,d,D,y){return e(),o("div",null,t)}const h=s(n,[["render",p]]);export{F as __pageData,h as default};
