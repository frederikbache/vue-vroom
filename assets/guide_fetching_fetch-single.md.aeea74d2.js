import{_ as s,o as a,c as l,a as n}from"./app.95b5cb64.js";const h=JSON.parse('{"title":"Showing single models","description":"","frontmatter":{},"headers":[{"level":2,"title":"Updates and subscriptions","slug":"updates-and-subscriptions","link":"#updates-and-subscriptions","children":[]},{"level":2,"title":"Lazy singles","slug":"lazy-singles","link":"#lazy-singles","children":[]}],"relativePath":"guide/fetching/fetch-single.md"}'),e={name:"guide/fetching/fetch-single.md"},o=n(`<h1 id="showing-single-models" tabindex="-1">Showing single models <a class="header-anchor" href="#showing-single-models" aria-hidden="true">#</a></h1><p>To show a single item from a model, use the <code>FetchSingle</code> component.</p><div class="language-vue"><button class="copy"></button><span class="lang">vue</span><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">FetchSingle</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">model</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">book</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#F78C6C;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;"> #</span><span style="color:#C792EA;">default</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">book</span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;{{</span><span style="color:#A6ACCD;"> book</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">title </span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">FetchSingle</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>It takes two key props</p><ul><li><code>model</code> the model to fetch</li><li><code>id</code> the id of the item to fetch</li></ul><p>The component has three slots</p><ul><li><code>default</code> will be shown when the item is successfully loaded with a single <code>slotProp</code> called the same as the models</li><li><code>loading</code> shown while loading (the first time)</li><li><code>failed</code> shown when the request failed</li></ul><p>If you add the <code>load-on-update</code> attribute, the loading slot will be shown every time the component refetches</p><h2 id="updates-and-subscriptions" tabindex="-1">Updates and subscriptions <a class="header-anchor" href="#updates-and-subscriptions" aria-hidden="true">#</a></h2><p>The component will subscribe to the id provided, making sure it will be kept in the store until the component is unmounted.</p><p>The component will trigger a fetch if the id ever changes (and update its subscriptions)</p><h2 id="lazy-singles" tabindex="-1">Lazy singles <a class="header-anchor" href="#lazy-singles" aria-hidden="true">#</a></h2><p>There might be cases where you know that the item you want to show has already been loaded (e.g. when showing details for a list). For those cases you can use the <code>lazy</code> prop.</p><p>When adding <code>lazy</code> the <code>FetchSingle</code> will behave exactly the same except it will never trigger a call to your api</p><div class="language-vue"><button class="copy"></button><span class="lang">vue</span><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">FetchSingle</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">model</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">book</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#F78C6C;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">lazy</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;"> #</span><span style="color:#C792EA;">default</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">book</span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;{{</span><span style="color:#A6ACCD;"> book</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">title </span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">FetchSingle</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div>`,15),t=[o];function p(c,r,F,i,D,y){return a(),l("div",null,t)}const u=s(e,[["render",p]]);export{h as __pageData,u as default};
